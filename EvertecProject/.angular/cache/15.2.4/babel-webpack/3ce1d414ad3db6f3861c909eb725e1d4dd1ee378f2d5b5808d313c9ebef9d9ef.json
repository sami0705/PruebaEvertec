{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { DatePipe } from '@angular/common';\nlet EditComponent = class EditComponent {\n  constructor(activerouter, router, api) {\n    this.activerouter = activerouter;\n    this.router = router;\n    this.api = api;\n    // En el componente, puedes crear un objeto de tipo PersonPruebaI con valores por defecto para todas las propiedades requeridas:\n    this.inforUser = {\n      idPerson: 0,\n      name: '',\n      lastName: '',\n      birthdate: new Date(),\n      photo: '',\n      idMaritalStatus: 0,\n      haveBrothers: false\n    };\n  }\n  ngOnInit() {\n    let userId = Number(this.activerouter.snapshot.paramMap.get('id'));\n    this.getUser(userId);\n  }\n  /** Consulta un usuario por id */\n  getUser(userId) {\n    this.api.getUser(userId).subscribe(data => {\n      this.inforUser = data;\n      const datePipe = new DatePipe('en-CO');\n      // Inicializar el objeto person con el valor del idPerson\n      //this.inforUser.idPerson = this.inforUser.idPerson;\n      /* this.editForm.setValue({\r\n         'idPerson': this.inforUser.idPerson,\r\n         /*'name': this.inforUser.name,\r\n         'lastName': this.inforUser.lastName,\r\n         'birthdate': datePipe.transform(this.inforUser.birthdate, 'dd/MM/yyyy'),\r\n         'photo':    this.inforUser.photo,\r\n         'idMaritalStatus':this.inforUser.idMaritalStatus,\r\n         'haveBrothers': this.inforUser.haveBrothers\r\n       })*/\n    });\n  }\n  /** Permite editar un usuario */\n  /*updateUser( ){\r\n  \r\n  }*/\n  onSubmit() {\n    //const idPerson = this.inforUser.idPerson;\n    // Aquí puedes llamar a un método del servicio REST para enviar los datos del formulario al servidor\n    this.api.putUser(this.inforUser).subscribe(data => {\n      //console.log(idPerson);\n    });\n  }\n  /** Permite guardar un usuario */\n  postform(form) {\n    console.log(form);\n    //form.name = form.name ?? ''; // Proporciona una cadena vacía si name es null\n    //let userId:number= Number(this.activerouter.snapshot.paramMap.get('id'));\n    /*\r\n     };*/\n  }\n};\n\nEditComponent = __decorate([Component({\n  selector: 'app-edit',\n  templateUrl: './edit.component.html',\n  styleUrls: ['./edit.component.css']\n})], EditComponent);\nexport { EditComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAKjD,SAASC,QAAQ,QAAQ,iBAAiB;AAanC,IAAMC,aAAa,GAAnB,MAAMA,aAAa;EAExBC,YAAoBC,YAA2B,EAAUC,MAAa,EAAUC,GAAqB;IAAjF,iBAAY,GAAZF,YAAY;IAAyB,WAAM,GAANC,MAAM;IAAiB,QAAG,GAAHC,GAAG;IAGnF;IACD,cAAS,GAAY;MACpBC,QAAQ,EAAE,CAAC;MACXC,IAAI,EAAE,EAAE;MACRC,QAAQ,EAAE,EAAE;MACZC,SAAS,EAAE,IAAIC,IAAI,EAAE;MACrBC,KAAK,EAAE,EAAE;MACTC,eAAe,EAAE,CAAC;MAClBC,YAAY,EAAE;KACf;EAVC;EAYFC,QAAQ;IACN,IAAIC,MAAM,GAASC,MAAM,CAAC,IAAI,CAACb,YAAY,CAACc,QAAQ,CAACC,QAAQ,CAACC,GAAG,CAAC,IAAI,CAAC,CAAC;IACxE,IAAI,CAACC,OAAO,CAACL,MAAM,CAAC;EACtB;EAGA;EACAK,OAAO,CAACL,MAAc;IAEtB,IAAI,CAACV,GAAG,CAACe,OAAO,CAACL,MAAM,CAAC,CAACM,SAAS,CAACC,IAAI,IAAG;MACtC,IAAI,CAACC,SAAS,GAAED,IAAI;MACpB,MAAME,QAAQ,GAAG,IAAIxB,QAAQ,CAAC,OAAO,CAAC;MAEtC;MACD;MACA;;;;;;;;;IASD,CAAC,CAAC;EACJ;EAEA;EACA;;;EAGAyB,QAAQ;IACN;IAEE;IACF,IAAI,CAACpB,GAAG,CAACqB,OAAO,CAAC,IAAI,CAACH,SAAS,CAAC,CAACF,SAAS,CAACC,IAAI,IAAG;MAChD;IAAA,CACD,CAAC;EACJ;EAGA;EACAK,QAAQ,CAACC,IAAkB;IAEzBC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;IACjB;IACA;IAED;;EAGD;CAEC;;AArEY3B,aAAa,eAPzBF,SAAS,CAAC;EACTgC,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,uBAAuB;EACpCC,SAAS,EAAE,CAAC,sBAAsB;CACnC,CAAC,GAGWhC,aAAa,CAqEzB;SArEYA,aAAa","names":["Component","DatePipe","EditComponent","constructor","activerouter","router","api","idPerson","name","lastName","birthdate","Date","photo","idMaritalStatus","haveBrothers","ngOnInit","userId","Number","snapshot","paramMap","get","getUser","subscribe","data","inforUser","datePipe","onSubmit","putUser","postform","form","console","log","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\niyir\\Documents\\GitHub\\PruebaEvertec\\EvertecProject\\src\\app\\vistas\\edit\\edit.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport {Router, ActivatedRoute} from '@angular/router'\nimport { PersonI } from 'src/app/models/person.interface';\nimport {ApiEvertecService} from '../../servicios/api-evertec.service';\nimport {FormGroup, FormControl, Validators} from '@angular/forms';\nimport { DatePipe } from '@angular/common';\nimport { Observable } from 'rxjs';\nimport { PersonPruebaI } from 'src/app/models/PersonPrueba.interface';\nimport { FormsModule } from '@angular/forms';\n\n\n@Component({\n  selector: 'app-edit',\n  templateUrl: './edit.component.html',\n  styleUrls: ['./edit.component.css']\n})\n\n\nexport class EditComponent implements OnInit {\n \n  constructor(private activerouter:ActivatedRoute, private router:Router, private api:ApiEvertecService){\n\n  }\n  // En el componente, puedes crear un objeto de tipo PersonPruebaI con valores por defecto para todas las propiedades requeridas:\n inforUser: PersonI = {\n  idPerson: 0,\n  name: '',\n  lastName: '',\n  birthdate: new Date(),\n  photo: '',\n  idMaritalStatus: 0,\n  haveBrothers: false,\n};\n\nngOnInit(): void{\n  let userId:number= Number(this.activerouter.snapshot.paramMap.get('id'));\n  this.getUser(userId);  \n}\n\n\n/** Consulta un usuario por id */\ngetUser(userId: number)\n{\nthis.api.getUser(userId).subscribe(data =>{   \n    this.inforUser= data;\n    const datePipe = new DatePipe('en-CO');\n\n    // Inicializar el objeto person con el valor del idPerson\n   //this.inforUser.idPerson = this.inforUser.idPerson;\n   /* this.editForm.setValue({\n      'idPerson': this.inforUser.idPerson,\n      /*'name': this.inforUser.name,\n      'lastName': this.inforUser.lastName,\n      'birthdate': datePipe.transform(this.inforUser.birthdate, 'dd/MM/yyyy'),\n      'photo':    this.inforUser.photo,\n      'idMaritalStatus':this.inforUser.idMaritalStatus,\n      'haveBrothers': this.inforUser.haveBrothers\n    })*/\n  })\n}\n\n/** Permite editar un usuario */\n/*updateUser( ){\n\n}*/\nonSubmit() {\n  //const idPerson = this.inforUser.idPerson;\n\n    // Aquí puedes llamar a un método del servicio REST para enviar los datos del formulario al servidor\n  this.api.putUser(this.inforUser).subscribe(data =>{ \n    //console.log(idPerson);\n  });\n}\n\n\n/** Permite guardar un usuario */\npostform(form:PersonPruebaI)\n{\n  console.log(form);\n  //form.name = form.name ?? ''; // Proporciona una cadena vacía si name es null\n  //let userId:number= Number(this.activerouter.snapshot.paramMap.get('id'));\n\n /* \n  };*/\n\n}\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}